<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="xyz.itwill.mapper.UserMapper">

    <!-- resultMap 정의 -->
    <resultMap id="userResultMap" type="xyz.itwill.dto.User">
        <id property="userNum" column="USER_NUM"/>
        <result property="userId" column="USER_ID"/>
        <result property="userPassword" column="USER_PASSWORD"/>
        <result property="userEmail" column="USER_EMAIL"/>
        <result property="userPhoneNum" column="USER_PHONE_NUM"/>
        <result property="userName" column="USER_NAME"/>
        <result property="userUpdateDate" column="USER_UPDATE_DATE"/>
        <result property="userLastLogin" column="USER_LAST_LOGIN"/>
        <result property="userRegisterDate" column="USER_REGISTER_DATE"/>
        <result property="userLevel" column="USER_LEVEL"/>
        <result property="userStatus" column="USER_STATUS"/>
        <result property="userNickname" column="USER_NICKNAME"/>
        <result property="userExperience" column="USER_EXPERIENCE"/>
    </resultMap>

    <!-- Insert User -->
    <insert id="insertUser">
    INSERT INTO USERS (USER_NUM, USER_ID, USER_PASSWORD, USER_EMAIL, USER_PHONE_NUM, USER_NAME, USER_REGISTER_DATE, USER_LEVEL, USER_STATUS, USER_NICKNAME, USER_EXPERIENCE)
    VALUES (USER_SEQ.NEXTVAL, #{userId}, #{userPassword}, #{userEmail}, #{userPhoneNum}, #{userName}, SYSDATE, #{userLevel}, #{userStatus}, #{userNickname}, #{userExperience})
</insert>


    <!-- Update User -->
   <update id="updateUser">
    UPDATE USERS
    SET 
        USER_PASSWORD = #{userPassword}, 
        USER_EMAIL = #{userEmail}, 
        USER_PHONE_NUM = #{userPhoneNum}, 
        USER_NAME = #{userName},
        USER_UPDATE_DATE = SYSDATE,
        USER_NICKNAME = #{userNickname},
        USER_EXPERIENCE = #{userExperience}
    WHERE USER_ID = #{userId}
</update>


    <!-- Delete User by userId -->
    <delete id="deleteUser">
        DELETE FROM USERS WHERE USER_ID = #{userId}
    </delete>

    <!-- Select a User by userId -->
   <select id="selectUser" parameterType="String" resultMap="userResultMap">
    SELECT USER_NUM, USER_ID, USER_PASSWORD, USER_EMAIL, USER_PHONE_NUM, USER_NAME, USER_UPDATE_DATE, USER_LAST_LOGIN, USER_REGISTER_DATE, USER_LEVEL, USER_STATUS, USER_NICKNAME, USER_EXPERIENCE
    FROM USERS
    WHERE USER_ID = #{userId}
</select>


    <!-- Select all Users -->
    <select id="selectUserList" resultMap="userResultMap">
    SELECT USER_NUM, USER_ID, USER_PASSWORD, USER_EMAIL, USER_PHONE_NUM, USER_NAME, USER_UPDATE_DATE, USER_LAST_LOGIN, USER_REGISTER_DATE, USER_LEVEL, USER_STATUS, USER_NICKNAME, USER_EXPERIENCE
    FROM USERS
</select>


   <!-- 닉네임으로 사용자 조회 -->
    <select id="selectUserByNickname" parameterType="string" resultMap="userResultMap">
    SELECT USER_NUM, USER_ID, USER_PASSWORD, USER_EMAIL, USER_PHONE_NUM, USER_NAME, USER_UPDATE_DATE, USER_LAST_LOGIN, USER_REGISTER_DATE, USER_LEVEL, USER_STATUS, USER_NICKNAME, USER_EXPERIENCE
    FROM USERS
    WHERE USER_NICKNAME = #{userNickname}
</select>

    <!-- Select a User by userId with explicit column mappings -->
    <select id="selectUserByUserId" parameterType="string" resultMap="userResultMap">
        SELECT * FROM USERS WHERE USER_ID = #{userId}
    </select>

    <!-- 아이디, 이메일, 이름으로 사용자 확인 -->
    <select id="selectUserByIdNameAndEmail" parameterType="map" resultMap="userResultMap">
        SELECT * FROM USERS WHERE USER_ID = #{userId} AND USER_EMAIL = #{userEmail} AND USER_NAME = #{userName}
    </select>

    <!-- 이메일과 이름으로 아이디 찾기 -->
    <select id="selectUserIdByEmailAndName" parameterType="map" resultType="String">
        SELECT USER_ID FROM USERS WHERE USER_EMAIL = #{email} AND USER_NAME = #{name} AND ROWNUM = 1
    </select>
 


<select id="getUserChatById" parameterType="map" resultType="xyz.itwill.dto.User">
    select user_id, user_nickname   <!-- 필요한 필드만 선택 -->
    from users
    where user_id = #{userId}  and user_nickname = #{nickname}
</select>




    
    <update id="updatePassword">
    UPDATE users
    SET user_password = #{userPassword}
    WHERE user_id = #{userId}
</update>

<update id="updateUserExperience">
    UPDATE users
    SET user_experience = #{userExperience}, user_level = #{userLevel}
    WHERE user_id = #{userId}
</update>


<update id="updateLastLogin" parameterType="string">
    UPDATE users 
    SET user_last_login = CURRENT_TIMESTAMP 
    WHERE user_id = #{userId}
</update>

<update id="updateNickname" parameterType="map">
    UPDATE USERS
    SET USER_NICKNAME = #{nickname}
    WHERE USER_ID = #{userId}
</update>

<update id="updateUserStatus">
    UPDATE users
    SET user_status = #{status}
    WHERE user_id = #{userId}
</update>


<update id="modifyUser">
    UPDATE USERS
    SET 
        USER_PASSWORD = #{userPassword}, 
        USER_EMAIL = #{userEmail}, 
        USER_PHONE_NUM = #{userPhoneNum}, 
        USER_NAME = #{userName},
        USER_UPDATE_DATE = SYSDATE,
        USER_NICKNAME = #{userNickname},
        USER_EXPERIENCE = #{userExperience},
        USER_STATUS = #{userStatus}  <!-- user_status 업데이트 추가 -->
    WHERE USER_ID = #{userId}
</update>



</mapper>


